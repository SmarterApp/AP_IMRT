<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="imrt-iss-load-test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="concurrentRequests" elementType="Argument">
            <stringProp name="Argument.name">concurrentRequests</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issSearchUrl" elementType="Argument">
            <stringProp name="Argument.name">issSearchUrl</stringProp>
            <stringProp name="Argument.value">http://iss-fw-loadtest.sbtds.org/v1/items/search</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issCountUrl" elementType="Argument">
            <stringProp name="Argument.name">issCountUrl</stringProp>
            <stringProp name="Argument.value">http://iss-fw-loadtest.sbtds.org/v1/items/count</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssoUrl" elementType="Argument">
            <stringProp name="Argument.name">ssoUrl</stringProp>
            <stringProp name="Argument.value">https://sso-deployment.sbtds.org:443/auth/oauth2/access_token?realm=/sbac</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="TEST_CONSTS" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="concurrentUsers" elementType="Argument">
            <stringProp name="Argument.name">concurrentUsers</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">The number of concurrent search requests that should be excuted against ISS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopCount" elementType="Argument">
            <stringProp name="Argument.name">loopCount</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.desc">The number of times the test should be run</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issBaseUrl" elementType="Argument">
            <stringProp name="Argument.name">issBaseUrl</stringProp>
            <stringProp name="Argument.value">http://iss-fw-loadtest.sbtds.org/v1/items/</stringProp>
            <stringProp name="Argument.desc">The base URL for the ISS load test environment</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issSearchUrli" elementType="Argument">
            <stringProp name="Argument.name">issSearchUrli</stringProp>
            <stringProp name="Argument.value">${issBaseUrl} + &quot;search&quot;</stringProp>
            <stringProp name="Argument.desc">The URL for executing search requests against the ISS load test environment</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="issCountUrl" elementType="Argument">
            <stringProp name="Argument.name">issCountUrl</stringProp>
            <stringProp name="Argument.value">${issbaseUrl} + &quot;count&quot;</stringProp>
            <stringProp name="Argument.desc">The URL for execuing count requests against the ISS load test environment</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssoDomain" elementType="Argument">
            <stringProp name="Argument.name">ssoDomain</stringProp>
            <stringProp name="Argument.value">sso-deployment.sbtds.org</stringProp>
            <stringProp name="Argument.desc">The SSO server domain for getting an SSO auth token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssoRequestPath" elementType="Argument">
            <stringProp name="Argument.name">ssoRequestPath</stringProp>
            <stringProp name="Argument.value">auth/oauth2/access_token?realm=/sbac</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The SSO server path to get an SSO auth token</stringProp>
          </elementProp>
          <elementProp name="ssoPort" elementType="Argument">
            <stringProp name="Argument.name">ssoPort</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.desc">The port on which the SSO server listens for requests</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssoUserName" elementType="Argument">
            <stringProp name="Argument.name">ssoUserName</stringProp>
            <stringProp name="Argument.value">superIAT@example.com</stringProp>
            <stringProp name="Argument.desc">The user account for getting an SSO auth token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssoUserPassword" elementType="Argument">
            <stringProp name="Argument.name">ssoUserPassword</stringProp>
            <stringProp name="Argument.value">password</stringProp>
            <stringProp name="Argument.desc">The password for the ssoUserName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssoClientId" elementType="Argument">
            <stringProp name="Argument.name">ssoClientId</stringProp>
            <stringProp name="Argument.value">sbacdw</stringProp>
            <stringProp name="Argument.desc">The SAML client identifier registered within OpenAM</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ssoClientSecret" elementType="Argument">
            <stringProp name="Argument.name">ssoClientSecret</stringProp>
            <stringProp name="Argument.value">sbacdw123</stringProp>
            <stringProp name="Argument.desc">The client secret for the ssoClientId</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="001 - Get SSO Auth Token" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST SSO Access Token Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ssoUserName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ssoUserPassword}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ssoClientId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ssoClientSecret}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ssoDomain}</stringProp>
          <stringProp name="HTTPSampler.port">${ssoPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${ssoRequestPath}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SSO Access Token from Response" enabled="true">
          <stringProp name="JSONPostProcessor.referenceNames">ssoAccessToken</stringProp>
          <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
          <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
        </JSONPostProcessor>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify access token was received" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="-914793855">[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message">Could not get auth token</stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">1</intProp>
          <stringProp name="Assertion.scope">variable</stringProp>
          <stringProp name="Scope.variable">ssoAccessToken</stringProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="002 - Execute Searches" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${concurrentUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
